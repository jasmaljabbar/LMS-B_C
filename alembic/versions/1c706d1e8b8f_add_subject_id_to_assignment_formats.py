"""Add subject_id to assignment_formats

Revision ID: 1c706d1e8b8f
Revises: 16b80164c38d
Create Date: 2025-04-17 13:56:19.665180

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1c706d1e8b8f'
down_revision: Union[str, None] = '16b80164c38d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add the column as nullable initially
    op.add_column('assignment_formats', sa.Column('subject_id', sa.Integer(), nullable=True))

    # Step 2: UPDATE EXISTING ROWS (IMPORTANT!)
    # You MUST populate the 'subject_id' for existing rows before making it non-nullable.
    # How you do this depends on your application logic.
    # Example: Update all existing formats to point to a default Subject ID (e.g., ID 1)
    # Replace '1' with the actual appropriate Subject ID or implement more complex logic.
    # IF YOU HAVE NO EXISTING ROWS, YOU CAN COMMENT OUT/REMOVE THIS op.execute()
    print("Populating subject_id for existing assignment_formats. Replace default '1' if needed.")
    op.execute('UPDATE assignment_formats SET subject_id = 1 WHERE subject_id IS NULL')
    # --- OR ---
    # If you need more complex logic, consider fetching data and updating programmatically,
    # though raw SQL is often sufficient for simple defaults.
    # Example: Assign based on name convention (use with caution!)
    # op.execute("UPDATE assignment_formats af JOIN subjects s ON af.name LIKE CONCAT(s.name, '%') SET af.subject_id = s.id WHERE af.subject_id IS NULL")

    # Step 3: Alter the column to be non-nullable
    op.alter_column('assignment_formats', 'subject_id',
                existing_type=sa.Integer(),
                nullable=False)

    # Step 4: Create an index on the new column
    op.create_index(op.f('ix_assignment_formats_subject_id'), 'assignment_formats', ['subject_id'], unique=False)

    # Step 5: Create the foreign key constraint
    op.create_foreign_key(
        'fk_assignment_formats_subject_id_subjects', # Explicit constraint name
        'assignment_formats', 'subjects',
        ['subject_id'], ['id'],
        ondelete='CASCADE'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Reverse order of upgrade steps
    op.drop_constraint('fk_assignment_formats_subject_id_subjects', 'assignment_formats', type_='foreignkey')
    op.drop_index(op.f('ix_assignment_formats_subject_id'), table_name='assignment_formats')
    op.drop_column('assignment_formats', 'subject_id')


